import subprocess
import json
import os
import re

def run_terraform_and_generate_hosts_file(terraform_dir=".", output_hosts_file="generated_hosts.txt"):
    """
    Runs terraform apply, captures its output, and generates a custom hosts-like text file.

    Args:
        terraform_dir (str): The directory where your Terraform configuration files are located.
        output_hosts_file (str): The name of the hosts-like text file to create.
    """
    print(f"--- Running terraform apply in {terraform_dir} ---")
    try:
        # Run terraform apply. Using -auto-approve for automation.
        # Be cautious with -auto-approve in production environments.
        apply_command = ["terraform", "apply", "-auto-approve"]
        apply_process = subprocess.run(
            apply_command,
            cwd=terraform_dir,
            capture_output=True,
            text=True,
            check=True
        )
        print("Terraform apply output:")
        print(apply_process.stdout)
        if apply_process.stderr:
            print("Terraform apply errors (if any):")
            print(apply_process.stderr)

    except subprocess.CalledProcessError as e:
        print(f"Error running terraform apply: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return
    except FileNotFoundError:
        print("Error: 'terraform' command not found. Please ensure Terraform is installed and in your PATH.")
        return

    print("\n--- Fetching Terraform output in JSON format ---")
    try:
        # Get Terraform outputs in JSON format
        output_command = ["terraform", "output", "-json"]
        output_process = subprocess.run(
            output_command,
            cwd=terraform_dir,
            capture_output=True,
            text=True,
            check=True
        )
        terraform_outputs = json.loads(output_process.stdout)
        print("Terraform JSON output fetched successfully.")

    except subprocess.CalledProcessError as e:
        print(f"Error fetching terraform output: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return
    except json.JSONDecodeError:
        print("Error: Could not decode Terraform output as JSON. Is there any output?")
        print(f"Raw output: {output_process.stdout}")
        return
    except FileNotFoundError:
        print("Error: 'terraform' command not found. Please ensure Terraform is installed and in your PATH.")
        return

    # Prepare data for the hosts-like file
    hosts_entries = {}

    print("\n--- Parsing Terraform outputs for hosts file entries ---")
    for key, value_obj in terraform_outputs.items():
        ip_address = value_obj.get("value")
        if not ip_address:
            print(f"Warning: Output '{key}' does not have a 'value' field or it's empty. Skipping.")
            continue

        # Map Terraform output keys to hostnames
        hostname = None
        if key == "file_distributor_floating_ip":
            hostname = "file-distributor"
        elif key == "file_receiver_floating_ip":
            hostname = "file-receiver"
        elif key == "kafka_floating_ip":
            hostname = "kafka"
        elif key == "postgres_floating_ip":
            hostname = "postgres"
        elif key.startswith("storage_node_") and key.endswith("_floating_ip"):
            # Extract a number if present in the key for uniqueness
            match = re.search(r'storage_node_(\d+)_floating_ip', key)
            if match:
                hostname = f"storage-node-{match.group(1)}"
            else:
                hostname = f"storage-node" # Fallback if no number
        elif key == "zookeeper_floating_ip":
            hostname = "zookeeper"

        if hostname:
            hosts_entries[ip_address] = hostname
        else:
            print(f"Info: Unrecognized Terraform output key '{key}'. Skipping for hosts file.")

    # Write the hosts-like file
    print(f"\n--- Writing hosts-like file to {output_hosts_file} ---")
    try:
        with open(output_hosts_file, "w") as f:
            f.write(f"# This file was automatically generated by {os.path.basename(__file__)}\n")
            f.write("# It resembles an /etc/hosts file but is not your system's hosts file.\n\n")
            for ip, host in hosts_entries.items():
                f.write(f"{ip}\t{host}\n")
        print(f"Hosts-like file '{output_hosts_file}' created successfully.")
    except IOError as e:
        print(f"Error writing hosts-like file: {e}")

if __name__ == "__main__":
    # You can specify the directory where your Terraform files are.
    # By default, it assumes the script is run in the same directory as your .tf files.
    # If your Terraform files are in a subdirectory (e.g., 'terraform/'), change this:
    # run_terraform_and_generate_hosts_file(terraform_dir="./terraform", output_hosts_file="my_custom_hosts.txt")
    run_terraform_and_generate_hosts_file()