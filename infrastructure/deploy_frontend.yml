---
- name: Deploy pnpm Frontend Application
  hosts: frontend
  become: true 

  vars:
    local_frontend_path: "../Frontend"                               
    app_root_dir: "/srv/frontend"                                     
    app_user: "ubuntu"                                               
    frontend_build_output_dir: "dist"
    node_version: "20"                                                
    build_output_dir: "dist"                                         
    nginx_user: "www-data"                                          
    nginx_server_name: "your-domain.com"                             
    nginx_conf_name: "frontend-app"                           
    nginx_port: "80"

  tasks:
    - name: Update apt cache and install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - git
          - nginx
          - ufw
          - rsync
        state: present
        update_cache: true

    - name: Allow HTTP and HTTPS through UFW
      community.general.ufw:
        rule: allow
        name: "Nginx Full"

    - name: Get Node.js setup script from NodeSource
      ansible.builtin.get_url:
        url: "https://deb.nodesource.com/setup_{{ node_version }}.x"
        dest: /tmp/nodesource_setup.sh
        mode: '0755'

    - name: Execute NodeSource setup script
      ansible.builtin.command:
        cmd: /tmp/nodesource_setup.sh
        creates: /etc/apt/sources.list.d/nodesource.list 

    - name: Install Node.js and npm
      ansible.builtin.apt:
        name: nodejs
        state: present

    - name: Install pnpm globally using npm
      ansible.builtin.npm:
        name: pnpm
        global: true
        state: present

    - name: Ensure application root directory exists
      ansible.builtin.file:
        path: "{{ app_root_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ nginx_user }}"
        mode: '0775'

    - name: Transfer frontend project from local to remote
      ansible.builtin.synchronize:
        src: "{{ local_frontend_path }}/"
        dest: "{{ app_root_dir }}"
        recursive: true
        delete: true
        rsync_opts:
          - "--exclude=.git/"
          - "--exclude=node_modules/"
          - "--exclude=dist/"
      become: true

    - name: Ensure build directory is cleared before a new build
      ansible.builtin.file:
        path: "{{ app_root_dir }}/{{ build_output_dir }}"
        state: absent
      become: true

    - name: Install pnpm dependencies
      ansible.builtin.command:
        cmd: pnpm install
        chdir: "{{ app_root_dir }}"
      become: true
      become_user: "{{ app_user }}"

    - name: Build frontend application
      ansible.builtin.command:
        cmd: pnpm build
        chdir: "{{ app_root_dir }}"
      become: true
      become_user: "{{ app_user }}"

    - name: Set correct permissions for the built assets for Nginx
      ansible.builtin.file:
        path: "{{ app_root_dir }}/{{ build_output_dir }}"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_user }}"
        mode: '0755'
        recurse: true

    - name: Configure Nginx for the frontend application
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: "/etc/nginx/sites-available/{{ nginx_conf_name }}.conf"
      notify: Restart Nginx

    - name: Enable Nginx site
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ nginx_conf_name }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ nginx_conf_name }}.conf"
        state: link
      notify: Restart Nginx

    - name: Remove default Nginx site to avoid conflicts
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
