---
- name: Deploy pnpm Frontend Application
  hosts: frontend # Define your target hosts group here (e.g., webservers)
  become: yes         # Run tasks with sudo privileges

  vars:
    # --- General Application Variables ---
    local_frontend_path: "../Frontend"                                      # Path to your local frontend project relative to the playbook
    frontend_app_dir: "/home/ubuntu/frontend"                               # Directory where the app will be copied and built on the remote server
    frontend_build_output_dir: "dist"                                       # Subdirectory where pnpm build outputs files (e.g., dist, build)
    frontend_user: "www-data"                                               # User that Nginx typically runs as
    ansible_user: "ubuntu"                                                  # Ensure this matches your SSH user

    # --- Nginx Configuration Variables ---
    nginx_server_name: "your-frontend-domain.com www.your-frontend-domain.com" # Replace with your domain(s) or server IP
    nginx_port: 80                                                            # Port for Nginx to listen on
    nginx_conf_name: "your-pnpm-app.conf"                                     # Name for the Nginx site configuration file (e.g., your-app.conf)

  tasks:
    - name: Ensure rsync is installed on the control (local) machine
      ansible.builtin.package:
        name: rsync
        state: present
      delegate_to: localhost # This task runs on the machine where Ansible is executed
      run_once: true         # Only run this task once, even if multiple hosts are targeted
      become: false

    - name: Update apt cache and install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - git
          - nginx
          - ufw
        state: present
        update_cache: yes

    - name: Allow HTTP and HTTPS through UFW
      community.general.ufw:
        rule: allow
        name: "{{ item }}"
      loop:
        - Nginx HTTP
        - Nginx HTTPS
      when: ansible_os_family == 'Debian'

    # - name: Install NVM (Node Version Manager) for the deployment user
    #   ansible.builtin.shell: |
    #     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #     [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    #   args:
    #     creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    #   register: nvm_install_output
    #   changed_when: nvm_install_output.rc != 0

    # - name: Ensure NVM is sourced for subsequent commands (for initial NVM/Node/pnpm checks)
    #   ansible.builtin.shell: |
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #   args:
    #     executable: /bin/bash
    #   changed_when: false

    # - name: Install Node.js LTS version via NVM
    #   ansible.builtin.shell: |
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #     nvm install --lts
    #     nvm use --lts
    #     nvm alias default 'lts/*'
    #   args:
    #     # Check for a specific NVM-managed node version to avoid re-installing unnecessarily
    #     creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v{{ lookup('pipe', 'nvm ls-remote --lts | head -n 1 | awk \\'{print $1}\\'' ) | regex_replace('[^0-9.]', '') }}"
    #   register: node_install_output
    #   changed_when: node_install_output.rc != 0

    # - name: Install pnpm globally
    #   ansible.builtin.shell: |
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Source NVM to find npm
    #     npm install -g pnpm
    #   register: pnpm_install_output
    #   changed_when: pnpm_install_output.rc != 0

    - name: Ensure application directory exists and has correct permissions
      ansible.builtin.file:
        path: "{{ frontend_app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ frontend_user }}"
        mode: '0755'
        recurse: yes

    - name: Transfer frontend project from local machine to remote server
      ansible.builtin.synchronize:
        src: "{{ local_frontend_path }}/"
        dest: "{{ frontend_app_dir }}"
        recursive: yes
        delete: yes # Delete extraneous files on the remote that are not in src
        rsync_opts:
          - "--exclude=.git/"
          - "--exclude=node_modules/" # Exclude node_modules to ensure fresh install
          - "--exclude=dist/"         # Exclude dist to ensure fresh build
      delegate_to: localhost
      register: sync_result
      changed_when: sync_result.changed

    - name: Install pnpm dependencies
      ansible.builtin.shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Re-source NVM to ensure pnpm is in PATH
        pnpm install
      args:
        chdir: "{{ frontend_app_dir }}"
      register: pnpm_install_result
      changed_when: "pnpm_install_result.rc != 0 or 'added' in pnpm_install_result.stdout or 'removed' in pnpm_install_result.stdout"

    - name: Build frontend application
      ansible.builtin.shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Re-source NVM to ensure pnpm is in PATH
        pnpm build
      args:
        chdir: "{{ frontend_app_dir }}"
      register: pnpm_build_result
      changed_when: "pnpm_build_result.rc != 0"

    - name: Set correct permissions for the built frontend files
      ansible.builtin.file:
        path: "{{ frontend_app_dir }}/{{ frontend_build_output_dir }}"
        owner: "{{ frontend_user }}"
        group: "{{ frontend_user }}"
        mode: '0755'
        recurse: yes

    - name: Configure Nginx for the frontend application
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: "/etc/nginx/sites-available/{{ nginx_conf_name }}"
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx

    - name: Enable Nginx site
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ nginx_conf_name }}"
        dest: "/etc/nginx/sites-enabled/{{ nginx_conf_name }}"
        state: link
        owner: root
        group: root
      notify: Restart Nginx

    - name: Remove default Nginx site (optional, recommended)
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted